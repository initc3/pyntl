version: '3.9'

services:
  pyntl:
    image: pyntl-dev
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    env_file: .env
    volumes:
      #- ./docs:/usr/src/pyntl/docs
      # FIXME Here we mount source files one by one because if we mount the src/ntl
      # directory the .so and .cpp files that are generated by `pip install --editable`
      # in the image will be overwritten, and consequently ntl will not be available,
      # meaning that `import ntl` will fail and running the tests, as well.
      #
      # Perhaps there's a way to mount a directory and to instruct docker-compose not
      # to overwrite some files that are there in the image but not on the host. In the
      # meantime we have to maintain the list of files to mount.
      - ./src/ntl/__init__.py:/usr/src/pyntl/src/ntl/__init__.py
      - ./src/ntl/__version__.py:/usr/src/pyntl/src/ntl/__version__.py
      - ./src/ntl/ccobject.pxd:/usr/src/pyntl/src/ntl/ccobject.pxd
      - ./src/ntl/ccobject_impl.h:/usr/src/pyntl/src/ntl/ccobject_impl.h
      - ./src/ntl/ntl_helpers.pyx:/usr/src/pyntl/src/ntl/ntl_helpers.pyx
      - ./src/ntl/ntlwrapper.pxd:/usr/src/pyntl/src/ntl/ntlwrapper.pxd
      - ./src/ntl/ntlwrapper_impl.h:/usr/src/pyntl/src/ntl/ntlwrapper_impl.h
      - ./src/ntl/rsdecode.pxd:/usr/src/pyntl/src/ntl/rsdecode.pxd
      - ./src/ntl/rsdecode_impl.h:/usr/src/pyntl/src/ntl/rsdecode_impl.h
      - ./tests:/usr/src/pyntl/tests
      - ./.flake8:/usr/src/pyntl/.flake8
      - ./Makefile:/usr/src/pyntl/Makefile
      - ./pytest.ini:/usr/src/pyntl/pytest.ini
      - ./pyproject.toml:/usr/src/pyntl/pyproject.toml
      - ./setup.cfg:/usr/src/pyntl/setup.cfg
      - ./setup.py:/usr/src/pyntl/setup.py
    command: pytest -v --cov=src
  pyntl-dist:
    image: pyntl-dist
    build:
      context: .
      dockerfile: Dockerfile
      target: dist
    env_file: .env
    volumes:
      - ./src:/usr/src/pyntl/src
      - ./Makefile:/usr/src/pyntl/Makefile
      - ./pyproject.toml:/usr/src/pyntl/pyproject.toml
      - ./setup.cfg:/usr/src/pyntl/setup.cfg
      - ./setup.py:/usr/src/pyntl/setup.py
      - ./dist:/usr/src/pyntl/dist
    command: python -m build
